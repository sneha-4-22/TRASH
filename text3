using System.Data;
using System.Data.SqlClient;

namespace Custom_report.Services
{
    public interface IDatabaseService
    {
        IDbConnection GetConnection();
    }
    
    public sealed class DatabaseService : IDatabaseService
    {
        private static DatabaseService? _instance;
        private static readonly object _lockObject = new object();
        private readonly string _connectionString;
        
        private DatabaseService(string connectionString)
        {
            _connectionString = connectionString;
        }
        
        public static DatabaseService GetInstance(string connectionString)
        {
            if (_instance == null)
            {
                lock (_lockObject)
                {
                    if (_instance == null)
                    {
                        _instance = new DatabaseService(connectionString);
                    }
                }
            }
            return _instance;
        }

        public IDbConnection GetConnection()
        {
            var connection = new SqlConnection(_connectionString);
            try 
            {
                connection.Open(); // Open the connection immediately
                return connection;
            }
            catch (Exception)
            {
                connection.Dispose();
                throw;
            }
        }
    }
}











public async Task<int> CreateReportAsync(ReportDefinition report)
{
    try
    {
        using var connection = _databaseService.GetConnection();
        // Connection is already opened in GetConnection()
        
        using var transaction = connection.BeginTransaction();
        
        try
        {
            var sql = @"
                INSERT INTO SnehaReportDefinitions 
                (ReportName, Description, Category, DataSourceType, DataSourceValue, 
                 Parameters, LayoutSettings, AccessRoles, IsActive, CreatedDate, ModifiedDate)
                OUTPUT INSERTED.ReportId
                VALUES 
                (@ReportName, @Description, @Category, @DataSourceType, @DataSourceValue, 
                 @Parameters, @LayoutSettings, @AccessRoles, @IsActive, GETDATE(), GETDATE())";
            
            // Use Dapper with the transaction
            var reportId = await connection.QuerySingleAsync<int>(sql, new {
                ReportName = report.ReportName,
                Description = report.Description ?? "",
                Category = report.Category ?? "",
                DataSourceType = report.DataSourceType,
                DataSourceValue = report.DataSourceValue,
                Parameters = report.Parameters ?? "",
                LayoutSettings = report.LayoutSettings ?? "",
                AccessRoles = report.AccessRoles ?? "[]",
                IsActive = report.IsActive
            }, transaction);
            
            // Auto-extract parameters from SQL/StoredProcedure
            List<string> detectedParams = new List<string>();
            
            if (report.DataSourceType?.ToLower() == "sql")
            {
                detectedParams = ExtractParametersFromSql(report.DataSourceValue);
            }
            else if (report.DataSourceType?.ToLower() == "storedprocedure")
            {
                detectedParams = ExtractParametersFromSql(report.DataSourceValue);
            }
            
            // Create ReportParameter entries for detected parameters
            if (detectedParams.Any())
            {
                var parameterSql = @"
                    INSERT INTO SnehaReportParameters 
                    (ReportId, ParameterName, DisplayName, ParameterType, DefaultValue, 
                     IsRequired, ValidationRule, DropdownOptions)
                    VALUES 
                    (@ReportId, @ParameterName, @DisplayName, @ParameterType, @DefaultValue, 
                     @IsRequired, @ValidationRule, @DropdownOptions)";
                
                foreach (var paramName in detectedParams)
                {
                    await connection.ExecuteAsync(parameterSql, new {
                        ReportId = reportId,
                        ParameterName = paramName,
                        DisplayName = FormatDisplayName(paramName),
                        ParameterType = GuessParameterType(paramName),
                        DefaultValue = (string?)null,
                        IsRequired = true,
                        ValidationRule = (string?)null,
                        DropdownOptions = (string?)null
                    }, transaction);
                }
            }
            
            // Also insert any manually provided parameters
            if (report.ReportParameters?.Any() == true)
            {
                var parameterSql = @"
                    INSERT INTO SnehaReportParameters 
                    (ReportId, ParameterName, DisplayName, ParameterType, DefaultValue, 
                     IsRequired, ValidationRule, DropdownOptions)
                    VALUES 
                    (@ReportId, @ParameterName, @DisplayName, @ParameterType, @DefaultValue, 
                     @IsRequired, @ValidationRule, @DropdownOptions)";
                
                foreach (var param in report.ReportParameters)
                {
                    // Skip if we already added this parameter from auto-detection
                    if (detectedParams.Contains(param.ParameterName))
                        continue;
                    
                    await connection.ExecuteAsync(parameterSql, new {
                        ReportId = reportId,
                        ParameterName = param.ParameterName,
                        DisplayName = param.DisplayName,
                        ParameterType = param.ParameterType,
                        DefaultValue = param.DefaultValue,
                        IsRequired = param.IsRequired,
                        ValidationRule = param.ValidationRule,
                        DropdownOptions = param.DropdownOptions
                    }, transaction);
                }
            }
            
            transaction.Commit();
            _logger.LogInformation("Successfully created report {ReportId} with {ParamCount} auto-detected parameters", 
                                 reportId, detectedParams.Count);
            return reportId;
        }
        catch
        {
            transaction.Rollback();
            throw;
        }
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "Error creating report: {ReportName}", report.ReportName);
        throw;
    }
}










{
  "ConnectionStrings": {
    "DefaultConnection": "Server=YOUR_SERVER;Database=YOUR_DATABASE;Integrated Security=true;Connection Timeout=60;Command Timeout=300;TrustServerCertificate=true;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}









using Custom_report.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Get connection string
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
if (string.IsNullOrEmpty(connectionString))
{
    throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
}

// Register services as singletons to use singleton pattern properly
builder.Services.AddSingleton<IDatabaseService>(provider => 
    DatabaseService.GetInstance(connectionString));

builder.Services.AddSingleton<IReportService>(provider =>
{
    var databaseService = provider.GetRequiredService<IDatabaseService>();
    var logger = provider.GetRequiredService<ILogger<ReportService>>();
    return ReportService.GetInstance(databaseService, logger);
});

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyHeader()
               .AllowAnyMethod();
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseCors();
app.UseAuthorization();
app.MapControllers();

// Test database connection on startup
try
{
    var dbService = app.Services.GetRequiredService<IDatabaseService>();
    using var connection = dbService.GetConnection();
    Console.WriteLine("✅ Database connection successful!");
}
catch (Exception ex)
{
    Console.WriteLine($"❌ Database connection failed: {ex.Message}");
}

app.Run();










[HttpPost]
public async Task<ActionResult<ApiResponse<int>>> CreateReport([FromBody] ReportDefinition report)
{
    try
    {
        _logger.LogInformation("Creating report: {ReportName}", report?.ReportName);
        
        if (report == null)
        {
            return BadRequest(ApiResponse<int>.ErrorResult("Report data is required"));
        }
        
        // Validate required fields
        var validationErrors = new List<string>();
        
        if (string.IsNullOrWhiteSpace(report.ReportName))
            validationErrors.Add("Report name is required");
            
        if (string.IsNullOrWhiteSpace(report.DataSourceType))
            validationErrors.Add("Data source type is required");
            
        if (string.IsNullOrWhiteSpace(report.DataSourceValue))
            validationErrors.Add("Data source value is required");
        
        if (validationErrors.Any())
        {
            return BadRequest(ApiResponse<int>.ErrorResult("Validation failed", validationErrors));
        }
        
        // Log the data being processed
        _logger.LogInformation("Report data: Name={ReportName}, Type={DataSourceType}, AccessRoles={AccessRoles}", 
            report.ReportName, report.DataSourceType, report.AccessRoles);
        
        if (!ModelState.IsValid)
        {
            var modelErrors = ModelState.Values
                .SelectMany(v => v.Errors.Select(e => e.ErrorMessage))
                .ToList();
            return BadRequest(ApiResponse<int>.ErrorResult("Invalid model", modelErrors));
        }
        
        var reportId = await _reportService.CreateReportAsync(report);
        
        _logger.LogInformation("Successfully created report with ID: {ReportId}", reportId);
        
        return CreatedAtAction(
            nameof(GetReportDefinition), 
            new { id = reportId }, 
            ApiResponse<int>.SuccessResult(reportId, "Report created successfully")
        );
    }
    catch (System.Data.SqlClient.SqlException sqlEx)
    {
        _logger.LogError(sqlEx, "Database error creating report: {ReportName}", report?.ReportName);
        
        if (sqlEx.Message.Contains("timeout") || sqlEx.Message.Contains("connection"))
        {
            return StatusCode(503, ApiResponse<int>.ErrorResult("Database connection issue. Please try again."));
        }
        
        return StatusCode(500, ApiResponse<int>.ErrorResult("Database error occurred"));
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "Error creating report: {ReportName}", report?.ReportName);
        return StatusCode(500, ApiResponse<int>.ErrorResult($"Internal server error: {ex.Message}"));
    }
}







//////////////////////////////////////////////////////////////////////THSI THE ITE HDHAIDYDHOIDH 








import React, { useState } from 'react';
import { reportService } from '../services/reportService';
import '../styles/ReportForm.css';

const ReportForm = ({ onBack, onSave }) => {
  const [formData, setFormData] = useState({
    reportName: '',
    description: '',
    category: '',
    dataSourceType: 'SQL',
    dataSourceValue: '',
    accessRoles: '',
    isActive: true
  });
  const [detectedParameters, setDetectedParameters] = useState([]);
  const [showParameterPreview, setShowParameterPreview] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [previewLoading, setPreviewLoading] = useState(false);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Clear parameter preview when changing data source
    if (name === 'dataSourceValue' || name === 'dataSourceType') {
      setDetectedParameters([]);
      setShowParameterPreview(false);
    }
  };

  const previewParameters = async () => {
    if (!formData.dataSourceValue.trim()) {
      setError('Please enter a data source value first');
      return;
    }

    try {
      setPreviewLoading(true);
      setError(null);

      const response = await reportService.previewParameters({
        dataSourceType: formData.dataSourceType,
        dataSourceValue: formData.dataSourceValue
      });

      if (response.success) {
        setDetectedParameters(response.data || []);
        setShowParameterPreview(true);
        console.log('Detected parameters:', response.data);
      } else {
        setError(response.message || 'Failed to preview parameters');
      }
    } catch (err) {
      console.error('Error previewing parameters:', err);
      setError('Failed to preview parameters');
    } finally {
      setPreviewLoading(false);
    }
  };

  const updateParameterProperty = (index, property, value) => {
    setDetectedParameters(prev => {
      const updated = [...prev];
      updated[index][property] = value;
      return updated;
    });
  };

  const removeParameter = (index) => {
    setDetectedParameters(prev => prev.filter((_, i) => i !== index));
  };

  const addParameter = () => {
    setDetectedParameters(prev => [...prev, {
      parameterName: '',
      displayName: '',
      suggestedType: 'Text',
      isRequired: false
    }]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log('Form submitted with data:', formData);
    
    try {
      setLoading(true);
      setError(null);
      
      // Format access roles properly
      let accessRolesFormatted = '[]';
      if (formData.accessRoles && formData.accessRoles.trim()) {
        const rolesArray = formData.accessRoles
          .split(',')
          .map(role => role.trim())
          .filter(role => role.length > 0);
        accessRolesFormatted = `["${rolesArray.join('","')}"]`;
      }
      
      // 🔥 FIX: Use PascalCase property names to match C# model exactly
      const reportData = {
        ReportName: formData.reportName.trim(),
        Description: formData.description?.trim() || "",
        Category: formData.category?.trim() || "",
        DataSourceType: formData.dataSourceType,
        DataSourceValue: formData.dataSourceValue.trim(),
        Parameters: "", 
        LayoutSettings: "", 
        AccessRoles: accessRolesFormatted,
        IsActive: formData.isActive,
        // Include detected parameters if any
        ReportParameters: detectedParameters.map(param => ({
          ParameterName: param.parameterName,
          DisplayName: param.displayName,
          ParameterType: param.suggestedType,
          DefaultValue: param.defaultValue || null,
          IsRequired: param.isRequired,
          ValidationRule: null,
          DropdownOptions: null
        }))
      };
      
      console.log('Final report data being sent:', reportData);
      console.log('AccessRoles formatted as:', accessRolesFormatted);
      console.log('Parameters to be created:', reportData.ReportParameters);
      
      const response = await reportService.createReport(reportData);
      console.log('Response received:', response);
      
      if (response && response.success) {
        console.log('Report created successfully!');
        setSuccess(true);
        setTimeout(() => {
          onSave();
        }, 2000);
      } else {
        console.error('Report creation failed:', response);
        setError(response?.message || 'Failed to create report');
      }
    } catch (err) {
      console.error('Exception in handleSubmit:', err);
      console.error('Error response:', err.response);
      setError(err.response?.data?.message || err.message || 'Failed to create report');
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="success-message">
        <h2>✅ Report Created Successfully!</h2>
        <p>Parameters have been automatically detected and configured.</p>
        <p>Redirecting back to reports list...</p>
      </div>
    );
  }

  return (
    <div className="report-form">
      <div className="form-header">
        <button className="btn btn-secondary" onClick={onBack}>
          ← Back to Reports
        </button>
        <h2>Create New Report</h2>
      </div>

      <form onSubmit={handleSubmit} className="form">
        <div className="form-group">
          <label htmlFor="reportName">Report Name *</label>
          <input
            type="text"
            id="reportName"
            name="reportName"
            value={formData.reportName}
            onChange={handleInputChange}
            required
            className="form-input"
            maxLength="100"
          />
        </div>

        <div className="form-group">
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            rows="3"
            className="form-textarea"
            maxLength="500"
          />
        </div>

        <div className="form-row">
          <div className="form-group">
            <label htmlFor="category">Category</label>
            <input
              type="text"
              id="category"
              name="category"
              value={formData.category}
              onChange={handleInputChange}
              className="form-input"
              maxLength="50"
            />
          </div>

          <div className="form-group">
            <label htmlFor="dataSourceType">Data Source Type *</label>
            <select
              id="dataSourceType"
              name="dataSourceType"
              value={formData.dataSourceType}
              onChange={handleInputChange}
              required
              className="form-select"
            >
              <option value="SQL">SQL Query</option>
              <option value="StoredProcedure">Stored Procedure</option>
              <option value="API">API Endpoint</option>
            </select>
          </div>
        </div>

        <div className="form-group">
          <label htmlFor="dataSourceValue">
            {formData.dataSourceType === 'StoredProcedure' ? 'Procedure Name' : 
             formData.dataSourceType === 'API' ? 'API Endpoint' : 'SQL Query'} *
          </label>
          <textarea
            id="dataSourceValue"
            name="dataSourceValue"
            value={formData.dataSourceValue}
            onChange={handleInputChange}
            required
            rows="4"
            className="form-textarea"
            placeholder={
              formData.dataSourceType === 'StoredProcedure' ? 'GetEmployeeReport' :
              formData.dataSourceType === 'API' ? 'https://api.example.com/data' :
              'SELECT * FROM TableName WHERE Column = @Parameter'
            }
          />
          {(formData.dataSourceType === 'SQL' || formData.dataSourceType === 'StoredProcedure') && (
            <div className="parameter-preview-section">
              <button
                type="button"
                className="btn btn-outline"
                onClick={previewParameters}
                disabled={previewLoading || !formData.dataSourceValue.trim()}
              >
                {previewLoading ? 'Detecting...' : '🔍 Detect Parameters'}
              </button>
              <small className="form-help">
                Click to automatically detect parameters from your SQL query or stored procedure
              </small>
            </div>
          )}
        </div>

        {showParameterPreview && (
          <div className="detected-parameters-section">
            <h3>Detected Parameters</h3>
            {detectedParameters.length === 0 ? (
              <p className="no-parameters">No parameters detected in your query.</p>
            ) : (
              <>
                <p className="parameters-info">
                  Found {detectedParameters.length} parameter(s). You can modify the settings below:
                </p>
                {detectedParameters.map((param, index) => (
                  <div key={index} className="parameter-config">
                    <div className="parameter-header">
                      <strong>@{param.parameterName}</strong>
                      <button
                        type="button"
                        className="btn-remove"
                        onClick={() => removeParameter(index)}
                        title="Remove parameter"
                      >
                        ✕
                      </button>
                    </div>
                    <div className="parameter-fields">
                      <div className="form-group">
                        <label>Display Name</label>
                        <input
                          type="text"
                          value={param.displayName}
                          onChange={(e) => updateParameterProperty(index, 'displayName', e.target.value)}
                          className="form-input"
                          placeholder="How this parameter appears to users"
                        />
                      </div>
                      <div className="form-group">
                        <label>Parameter Type</label>
                        <select
                          value={param.suggestedType}
                          onChange={(e) => updateParameterProperty(index, 'suggestedType', e.target.value)}
                          className="form-select"
                        >
                          <option value="Text">Text</option>
                          <option value="Number">Number</option>
                          <option value="Date">Date</option>
                          <option value="Dropdown">Dropdown</option>
                        </select>
                      </div>
                      <div className="form-group">
                        <label>Default Value</label>
                        <input
                          type="text"
                          value={param.defaultValue || ''}
                          onChange={(e) => updateParameterProperty(index, 'defaultValue', e.target.value)}
                          className="form-input"
                          placeholder="Optional default value"
                        />
                      </div>
                      <div className="form-group">
                        <label className="checkbox-label">
                          <input
                            type="checkbox"
                            checked={param.isRequired}
                            onChange={(e) => updateParameterProperty(index, 'isRequired', e.target.checked)}
                          />
                          Required Parameter
                        </label>
                      </div>
                    </div>
                  </div>
                ))}
                <button
                  type="button"
                  className="btn btn-outline"
                  onClick={addParameter}
                >
                  + Add Manual Parameter
                </button>
              </>
            )}
          </div>
        )}

        <div className="form-group">
          <label htmlFor="accessRoles">Access Roles (comma separated)</label>
          <input
            type="text"
            id="accessRoles"
            name="accessRoles"
            value={formData.accessRoles}
            onChange={handleInputChange}
            className="form-input"
            placeholder="Admin, HR, Sales"
          />
          <small className="form-help">Enter roles separated by commas (e.g., Admin, HR, Sales)</small>
        </div>

        <div className="form-group">
          <label className="checkbox-label">
            <input
              type="checkbox"
              name="isActive"
              checked={formData.isActive}
              onChange={handleInputChange}
            />
            Active
          </label>
        </div>

        {error && (
          <div className="error-message">
            <strong>Error:</strong> {error}
          </div>
        )}

        <div className="form-actions">
          <button type="button" className="btn btn-secondary" onClick={onBack}>
            Cancel
          </button>
          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? 'Creating...' : 'Create Report'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ReportForm;










using System.Data;
using System.Data.SqlClient;

namespace Custom_report.Services
{
    public interface IDatabaseService
    {
        IDbConnection GetConnection();
    }
    
    public sealed class DatabaseService : IDatabaseService
    {
        private static DatabaseService? _instance;
        private static readonly object _lockObject = new object();
        private readonly string _connectionString;
        
        private DatabaseService(string connectionString)
        {
            _connectionString = connectionString;
        }
        
        public static DatabaseService GetInstance(string connectionString)
        {
            if (_instance == null)
            {
                lock (_lockObject)
                {
                    if (_instance == null)
                    {
                        _instance = new DatabaseService(connectionString);
                    }
                }
            }
            return _instance;
        }

        public IDbConnection GetConnection()
        {
            var connection = new SqlConnection(_connectionString);
            try 
            {
                connection.Open(); // Open the connection immediately
                return connection;
            }
            catch (Exception)
            {
                connection.Dispose();
                throw;
            }
        }
    }
}
