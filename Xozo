Previewing parameters for: 
{dataSourceType: 'SQL', dataSourceValue: 'SELECT * FROM PlanAlerts WITH(NOLOCK) WHERE PlanAlertID= @PlanAlertID ORDER BY CreatedDate DESC'}
reportService.js:18 API Request: 
{method: 'post', url: '/reports/preview-parameters', data: {…}, params: undefined}
reportService.js:35 API Response: 
{url: '/reports/preview-parameters', status: 200, data: {…}}
ReportForm.js:55 Detected parameters: 
[{…}]
ReportForm.js:90 Form submitted with data: 
{reportName: 'CUSTOM GET ALL NOTES FOR GIVEN PLANALERT', description: 'information ', category: 'CUSTOM PLAN ALERT', dataSourceType: 'SQL', dataSourceValue: 'SELECT * FROM PlanAlerts WITH(NOLOCK) WHERE PlanAlertID= @PlanAlertID ORDER BY CreatedDate DESC', …}
ReportForm.js:128 Final report data being sent: 
{reportName: 'CUSTOM GET ALL NOTES FOR GIVEN PLANALERT', description: 'information', category: 'CUSTOM PLAN ALERT', dataSourceType: 'SQL', dataSourceValue: 'SELECT * FROM PlanAlerts WITH(NOLOCK) WHERE PlanAlertID= @PlanAlertID ORDER BY CreatedDate DESC', …}
ReportForm.js:129 AccessRoles formatted as: ["Admin"]
ReportForm.js:130 Parameters to be created: 
[{…}]
reportService.js:145 Creating report with data: 
{reportName: 'CUSTOM GET ALL NOTES FOR GIVEN PLANALERT', description: 'information', category: 'CUSTOM PLAN ALERT', dataSourceType: 'SQL', dataSourceValue: 'SELECT * FROM PlanAlerts WITH(NOLOCK) WHERE PlanAlertID= @PlanAlertID ORDER BY CreatedDate DESC', …}
reportService.js:18 API Request: 
{method: 'post', url: '/reports', data: {…}, params: undefined}
reportService.js:169 
 
 POST http://localhost:5118/api/reports 400 (Bad Request)
reportService.js:43 
 Response Error: 
{url: '/reports', status: 400, message: 'Request failed with status code 400', data: {…}}
reportService.js:183 
 Error creating report: 
AxiosError {message: 'Request failed with status code 400', name: 'AxiosError', code: 'ERR_BAD_REQUEST', config: {…}, request: XMLHttpRequest, …}
ReportForm.js:133 Response received: 
{success: false, message: 'Request failed with status code 400', data: null}
ReportForm.js:142 
 Report creation failed: 
{success: false, message: 'Request failed with status code 400', data: null}
data
: 
null
message
: 
"Request failed with status code 400"
success
: 
false
[[Prototype]]
: 
Object
constructor
: 
ƒ Object()
hasOwnProperty
: 
ƒ hasOwnProperty()
isPrototypeOf
: 
ƒ isPrototypeOf()
propertyIsEnumerable
: 
ƒ propertyIsEnumerable()
toLocaleString
: 
ƒ toLocaleString()
toString
: 
ƒ toString()
valueOf
: 
ƒ valueOf()
__defineGetter__
: 
ƒ __defineGetter__()
__defineSetter__
: 
ƒ __defineSetter__()
__lookupGetter__
: 
ƒ __lookupGetter__()
__lookupSetter__
: 
ƒ __lookupSetter__()
__proto__
: 
(...)
get __proto__
: 
ƒ __proto__()
set __proto__
: 
ƒ __proto__()
Dynamic Report Builder
I've designed a flexible report generation system where reports can be created through database entries and automatically appear in the UI without code changes.
Key Components
1.	Database Structure
o	ReportDefinitions table (core metadata)
o	ReportParameters table (parameter configuration)
2.	Backend Services
o	ReportService (data retrieval and processing)
o	ReportAdminService (management interface)
3.	Multiple Data Sources
o	Stored Procedures
o	SQL Queries
o	API Endpoints
4.	Frontend Features
o	Report dashboard with category filtering
o	Parameter form generation
o	Dynamic data display
o	Export options (Excel, PDF, CSV)
5.	Security
o	Role-based visibility
o	Parameter validation
Implementation Benefits
•	No-code report creation - Business users can create reports without developer involvement
•	Flexible parameters - Support for text, number, date, and dropdown parameters
•	Automatic UI generation - Forms and tables built dynamically based on metadata
•	Export functionality - Built-in support for common export formats
This system makes reporting truly configurable through database entries, allowing business users to create and share reports while maintaining security and performance.
USE PES 

CREATE TABLE SnehaReportDefinitions (
    ReportId INT PRIMARY KEY IDENTITY(1,1),
    ReportName NVARCHAR(100) NOT NULL,
    Description NVARCHAR(500),
    Category NVARCHAR(50),
    DataSourceType NVARCHAR(50) NOT NULL,
    DataSourceValue NVARCHAR(MAX) NOT NULL, 
    Parameters NVARCHAR(MAX),
    LayoutSettings NVARCHAR(MAX) DEFAULT TBD , -- TO BE DETERMINED 
    AccessRoles NVARCHAR(MAX),
    IsActive BIT DEFAULT 1,
    CreatedDate DATETIME DEFAULT GETDATE(),
    ModifiedDate DATETIME DEFAULT GETDATE()
);

CREATE TABLE SnehaReportParameters (
    ParameterId INT PRIMARY KEY IDENTITY(1,1),
    ReportId INT FOREIGN KEY REFERENCES SnehaReportDefinitions(ReportId),
    ParameterName NVARCHAR(50) NOT NULL,
    DisplayName NVARCHAR(100) NOT NULL,
    ParameterType NVARCHAR(50) NOT NULL, 
    DefaultValue NVARCHAR(MAX),
    IsRequired BIT DEFAULT 0,
    ValidationRule NVARCHAR(500),
    DropdownOptions NVARCHAR(MAX) 
);
SELECT * FROM SnehaReportDefinitions;
SELECT * FROM SnehaReportParameters;


INSERT INTO SnehaReportDefinitions 
(ReportName, Description, Category, DataSourceType, DataSourceValue, AccessRoles, IsActive)
VALUES 
('ALL Dreamify Users', 
 'Complete list of all users in the system', 
 'Users', 
 'SQL', 
 'SELECT * FROM PlanAlerts WITH(NOLOCK) WHERE PlanAlertID= 1015411 ORDER BY CreatedDate DESC', 
 '["Admin"]', 
 1);

using Custom_report.Models;
using Custom_report.Services;
using Microsoft.AspNetCore.Mvc;
using System.Data;
using System.ComponentModel.DataAnnotations;

namespace Custom_report.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ReportsController : ControllerBase
    {
        private readonly IReportService _reportService;
        private readonly ILogger<ReportsController> _logger;
        
        public ReportsController(IReportService reportService, ILogger<ReportsController> logger)
        {
            _reportService = reportService;
            _logger = logger;
        }
        
        /// <summary>
        /// Get all available reports for the current user
        /// </summary>
        [HttpGet]
        public async Task<ActionResult<ApiResponse<List<ReportDefinition>>>> GetAvailableReports()
        {
            try
            {
                // For now, we'll use default roles. In real app, get from JWT token or session
                var userRoles = new[] { "Admin", "HR", "Sales" };
                
                var reports = await _reportService.GetAvailableReportsAsync(userRoles);
                return Ok(ApiResponse<List<ReportDefinition>>.SuccessResult(reports));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving available reports");
                return StatusCode(500, ApiResponse<List<ReportDefinition>>.ErrorResult("Internal server error"));
            }
        }
        
        /// <summary>
        /// Get report definition by ID
        /// </summary>
        [HttpGet("{id}")]
        public async Task<ActionResult<ApiResponse<ReportDefinition>>> GetReportDefinition(int id)
        {
            try
            {
                var report = await _reportService.GetReportDefinitionAsync(id);
                if (report == null)
                    return NotFound(ApiResponse<ReportDefinition>.ErrorResult("Report not found"));
                
                return Ok(ApiResponse<ReportDefinition>.SuccessResult(report));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving report definition for ID: {ReportId}", id);
                return StatusCode(500, ApiResponse<ReportDefinition>.ErrorResult("Internal server error"));
            }
        }
        
        /// <summary>
        /// Preview parameters that would be extracted from SQL/Stored Procedure
        /// </summary>
        [HttpPost("preview-parameters")]
        public ActionResult<ApiResponse<List<ParameterPreview>>> PreviewParameters([FromBody] ParameterPreviewRequest request)
        {
            try
            {
                if (string.IsNullOrEmpty(request.DataSourceValue))
                {
                    return BadRequest(ApiResponse<List<ParameterPreview>>.ErrorResult("DataSourceValue is required"));
                }

                var parameters = _reportService.ExtractParametersFromSql(request.DataSourceValue);
                var previews = parameters.Select(p => new ParameterPreview
                {
                    ParameterName = p,
                    DisplayName = FormatDisplayName(p),
                    SuggestedType = GuessParameterType(p),
                    IsRequired = true
                }).ToList();

                return Ok(ApiResponse<List<ParameterPreview>>.SuccessResult(previews));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error previewing parameters");
                return StatusCode(500, ApiResponse<List<ParameterPreview>>.ErrorResult("Internal server error"));
            }
        }
        
        private string FormatDisplayName(string parameterName)
        {
            // Convert camelCase/PascalCase to readable format
            var result = System.Text.RegularExpressions.Regex.Replace(parameterName, @"([A-Z])", " $1").Trim();
            
            if (!string.IsNullOrEmpty(result))
            {
                result = char.ToUpper(result[0]) + result.Substring(1);
            }
            
            return result;
        }
        
        private string GuessParameterType(string parameterName)
        {
            var lowerName = parameterName.ToLower();
            
            if (lowerName.Contains("date") || lowerName.Contains("time"))
                return "Date";
            
            if (lowerName.Contains("id") || lowerName.Contains("count") || lowerName.Contains("number"))
                return "Number";
            
            if (lowerName.Contains("status") || lowerName.Contains("type") || lowerName.Contains("category"))
                return "Dropdown";
            
            return "Text";
        }
        
        [HttpPost("{id}/generate")]
        public async Task<ActionResult<ApiResponse<object>>> GenerateReport(int id, [FromBody] ReportGenerationRequest request)
        {
            try
            {
                _logger.LogInformation("Generating report {ReportId} with parameters: {@Parameters}", id, request?.Parameters);

                // Handle null request
                var parameters = request?.Parameters ?? new Dictionary<string, object>();
                
                var reportData = await _reportService.GenerateReportAsync(id, parameters);
                
                if (reportData.HasError)
                {
                    _logger.LogWarning("Report generation failed for ID {ReportId}: {Error}", id, reportData.Error);
                    return BadRequest(ApiResponse<object>.ErrorResult(reportData.Error));
                }
                
                // Convert DataTable to a more JSON-friendly format
                var result = new
                {
                    Metadata = reportData.Metadata,
                    Columns = reportData.Data.Columns.Cast<DataColumn>().Select(c => new { 
                        Name = c.ColumnName, 
                        Type = c.DataType.Name 
                    }),
                    Rows = reportData.Data.AsEnumerable().Select(row => 
                        reportData.Data.Columns.Cast<DataColumn>().ToDictionary(
                            col => col.ColumnName, 
                            col => row[col] == DBNull.Value ? null : row[col]
                        )
                    )
                };
                
                _logger.LogInformation("Successfully generated report {ReportId} with {RowCount} rows", id, reportData.Data.Rows.Count);
                return Ok(ApiResponse<object>.SuccessResult(result));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating report for ID: {ReportId}", id);
                return StatusCode(500, ApiResponse<object>.ErrorResult($"Internal server error: {ex.Message}"));
            }
        }
        
        /// <summary>
        /// Create a new report
        /// </summary>
        [HttpPost]
        public async Task<ActionResult<ApiResponse<int>>> CreateReport([FromBody] ReportDefinition report)
        {
            try
            {
                if (!ModelState.IsValid)
                    return BadRequest(ApiResponse<int>.ErrorResult("Invalid model", ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage)).ToList()));
                
                var reportId = await _reportService.CreateReportAsync(report);
                return CreatedAtAction(nameof(GetReportDefinition), new { id = reportId }, ApiResponse<int>.SuccessResult(reportId, "Report created successfully"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating report: {ReportName}", report.ReportName);
                return StatusCode(500, ApiResponse<int>.ErrorResult("Internal server error"));
            }
        }
        
        /// <summary>
        /// Update an existing report
        /// </summary>
        [HttpPut("{id}")]
        public async Task<ActionResult<ApiResponse<bool>>> UpdateReport(int id, [FromBody] ReportDefinition report)
        {
            try
            {
                if (id != report.ReportId)
                    return BadRequest(ApiResponse<bool>.ErrorResult("Report ID mismatch"));
                
                if (!ModelState.IsValid)
                    return BadRequest(ApiResponse<bool>.ErrorResult("Invalid model", ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage)).ToList()));
                
                var success = await _reportService.UpdateReportAsync(report);
                if (!success)
                    return NotFound(ApiResponse<bool>.ErrorResult("Report not found"));
                
                return Ok(ApiResponse<bool>.SuccessResult(true, "Report updated successfully"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating report: {ReportId}", id);
                return StatusCode(500, ApiResponse<bool>.ErrorResult("Internal server error"));
            }
        }
        
        /// <summary>
        /// Delete a report (soft delete)
        /// </summary>
        [HttpDelete("{id}")]
        public async Task<ActionResult<ApiResponse<bool>>> DeleteReport(int id)
        {
            try
            {
                var success = await _reportService.DeleteReportAsync(id);
                if (!success)
                    return NotFound(ApiResponse<bool>.ErrorResult("Report not found"));
                
                return Ok(ApiResponse<bool>.SuccessResult(true, "Report deleted successfully"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting report: {ReportId}", id);
                return StatusCode(500, ApiResponse<bool>.ErrorResult("Internal server error"));
            }
        }
    }

    public class ReportGenerationRequest
    {
        public Dictionary<string, object> Parameters { get; set; } = new Dictionary<string, object>();
    }

    public class ParameterPreviewRequest
    {
        public string DataSourceType { get; set; }
        public string DataSourceValue { get; set; }
    }

    public class ParameterPreview
    {
        public string ParameterName { get; set; }
        public string DisplayName { get; set; }
        public string SuggestedType { get; set; }
        public bool IsRequired { get; set; }
    }
}
namespace Custom_report.Models
{
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string  Message { get; set; }
        public T Data { get; set; }
        public List<string> Errors { get; set; } = new List<string>();
        
        public static ApiResponse<T> SuccessResult(T data, string message = "Success")
        {
            return new ApiResponse<T>
            {
                Success = true,
                Message = message,
                Data = data
            };
        }
        
        public static ApiResponse<T> ErrorResult(string message, List<string> errors = null)
        {
            return new ApiResponse<T>
            {
                Success = false,
                Message = message,
                Errors = errors ?? new List<string>()
            };
        }
    }
}namespace Custom_report.Models
{
    public class DropdownOption
    {
        public string Value { get; set; }
        public string Display { get; set; }
    }
}
using System.Data;

namespace Custom_report.Models
{
    public class ReportData
    {
        public ReportDefinition Metadata { get; set; }
        public DataTable Data { get; set; }
        public string Error { get; set; }
        public bool HasError => !string.IsNullOrEmpty(Error);
    }
}using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Custom_report.Models
{
    public class ReportDefinition
    {
        public int ReportId { get; set; }

        [Required]
        [StringLength(100)]
        public string ReportName { get; set; }

        [StringLength(500)]
        public string Description { get; set; }

        [StringLength(50)]
        public string Category { get; set; }

        [Required]
        [StringLength(50)]
        public string DataSourceType { get; set; }

        [Required]
        public string DataSourceValue { get; set; }

        public string Parameters { get; set; }
        public string LayoutSettings { get; set; }
        public string AccessRoles { get; set; }
        public bool IsActive { get; set; } = true;
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }

        // Navigation Properties (not mapped to DB)
        [JsonIgnore]
        public List<ReportParameter> ReportParameters { get; set; } = new List<ReportParameter>();

        [JsonIgnore]
        public List<string> AccessRolesList
        {
            get => string.IsNullOrEmpty(AccessRoles) ? new List<string>() : JsonConvert.DeserializeObject<List<string>>(AccessRoles);
            set => AccessRoles = JsonConvert.SerializeObject(value);
        }
    }
}
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
namespace Custom_report.Models
{
    public class ReportParameter
    {
        public int ParameterId { get; set; }
        public int ReportId { get; set; }
        
        [Required]
        [StringLength(50)]
        public string ParameterName{ get; set; }
        
        [Required]
        [StringLength(100)]
        public string DisplayName { get; set; }
        
        [Required]
        [StringLength(50)]
        public string ParameterType { get; set; }
        
        public string DefaultValue { get; set; }
        public bool IsRequired { get; set; }
        
        [StringLength(500)]
        public string ValidationRule { get; set; }
        
        public string DropdownOptions { get; set; }
        
        
        // Helper property for dropdown options
        public List<DropdownOption> DropdownOptionsList
        {
            get => string.IsNullOrEmpty(DropdownOptions) ? new List<DropdownOption>() : JsonConvert.DeserializeObject<List<DropdownOption>>(DropdownOptions);
            set => DropdownOptions = JsonConvert.SerializeObject(value);
        }
    }
}
using System.Data;
using System.Data.SqlClient;

namespace Custom_report.Services
{
    public interface IDatabaseService
    {
        IDbConnection GetConnection();
    }
    
    public sealed class DatabaseService : IDatabaseService
    {
        private static DatabaseService? _instance;
        private static readonly object _lockObject = new object();
        private readonly string _connectionString;
        
        private DatabaseService(string connectionString)
        {
            _connectionString = connectionString;
        }
        
        public static DatabaseService GetInstance(string connectionString)
        {
            if (_instance == null)
            {
                lock (_lockObject)
                {
                    if (_instance == null)
                    {
                        _instance = new DatabaseService(connectionString);
                    }
                }
            }
            return _instance;
        }

        [Obsolete]
        public IDbConnection GetConnection()
        {
            return new SqlConnection(_connectionString);
        }
    }
}using Custom_report.Models;
using Dapper;
using System.Data;
using System.Data.SqlClient;
using Newtonsoft.Json;
using System.Text.RegularExpressions;

namespace Custom_report.Services
{
    public interface IReportService
    {
        Task<List<ReportDefinition>> GetAvailableReportsAsync(IEnumerable<string> userRoles);
        Task<ReportDefinition> GetReportDefinitionAsync(int reportId);
        Task<ReportData> GenerateReportAsync(int reportId, Dictionary<string, object> parameters);
        Task<int> CreateReportAsync(ReportDefinition report);
        Task<bool> UpdateReportAsync(ReportDefinition report);
        Task<bool> DeleteReportAsync(int reportId);
        List<string> ExtractParametersFromSql(string sql);
    }
    
    public sealed class ReportService : IReportService
    {
        private static ReportService? _instance;
        private static readonly object _lockObject = new object();
        private readonly IDatabaseService _databaseService;
        private readonly ILogger<ReportService> _logger;
        
        private ReportService(IDatabaseService databaseService, ILogger<ReportService> logger)
        {
            _databaseService = databaseService;
            _logger = logger;
        }
        
        public static ReportService GetInstance(IDatabaseService databaseService, ILogger<ReportService> logger)
        {
            if (_instance == null)
            {
                lock (_lockObject)
                {
                    if (_instance == null)
                    {
                        _instance = new ReportService(databaseService, logger);
                    }
                }
            }
            return _instance;
        }
        
        public List<string> ExtractParametersFromSql(string sql)
        {
            if (string.IsNullOrEmpty(sql))
                return new List<string>();

            // Regex to find SQL parameters (@ParameterName)
            var parameterRegex = new Regex(@"@([a-zA-Z_][a-zA-Z0-9_]*)", RegexOptions.IgnoreCase);
            var matches = parameterRegex.Matches(sql);
            
            var parameters = new HashSet<string>();
            foreach (Match match in matches)
            {
                parameters.Add(match.Groups[1].Value);
            }
            
            return parameters.ToList();
        }
        
        public async Task<List<ReportDefinition>> GetAvailableReportsAsync(IEnumerable<string> userRoles)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                var sql = @"
                    SELECT ReportId, ReportName, Description, Category, DataSourceType, 
                           DataSourceValue, Parameters, LayoutSettings, AccessRoles, 
                           IsActive, CreatedDate, ModifiedDate 
                    FROM SnehaReportDefinitions 
                    WHERE IsActive = 1";
                
                var reports = (await connection.QueryAsync<ReportDefinition>(sql)).ToList();
                
                // Filter by user roles
                var filteredReports = reports.Where(r =>
                {
                    if (string.IsNullOrEmpty(r.AccessRoles)) return true;
                    
                    try
                    {
                        var accessRoles = JsonConvert.DeserializeObject<List<string>>(r.AccessRoles);
                        return !accessRoles.Any() || accessRoles.Any(role => userRoles.Contains(role));
                    }
                    catch
                    {
                        return true; // If JSON parsing fails, allow access
                    }
                }).ToList();
                
                return filteredReports;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving available reports");
                throw;
            }
        }
        
        public async Task<ReportDefinition> GetReportDefinitionAsync(int reportId)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                var reportSql = @"
                    SELECT ReportId, ReportName, Description, Category, DataSourceType, 
                           DataSourceValue, Parameters, LayoutSettings, AccessRoles, 
                           IsActive, CreatedDate, ModifiedDate 
                    FROM SnehaReportDefinitions 
                    WHERE ReportId = @ReportId";
                
                var report = await connection.QueryFirstOrDefaultAsync<ReportDefinition>(reportSql, new { ReportId = reportId });
                
                if (report == null) return null;
                
                // Load parameters
                var parametersSql = @"
                    SELECT ParameterId, ReportId, ParameterName, DisplayName, ParameterType, 
                           DefaultValue, IsRequired, ValidationRule, DropdownOptions 
                    FROM SnehaReportParameters 
                    WHERE ReportId = @ReportId";
                
                var parameters = (await connection.QueryAsync<ReportParameter>(parametersSql, new { ReportId = reportId })).ToList();
                report.ReportParameters = parameters;
                
                return report;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving report definition for ReportId: {ReportId}", reportId);
                throw;
            }
        }

        public async Task<ReportData> GenerateReportAsync(int reportId, Dictionary<string, object> parameters)
        {
            var result = new ReportData();
            
            try
            {
                var reportDef = await GetReportDefinitionAsync(reportId);
                if (reportDef == null)
                {
                    result.Error = "Report not found";
                    return result;
                }
                
                result.Metadata = reportDef;
                
                // Validate required parameters
                var validationError = ValidateParameters(reportDef.ReportParameters, parameters);
                if (!string.IsNullOrEmpty(validationError))
                {
                    result.Error = validationError;
                    return result;
                }
                
                using var connection = _databaseService.GetConnection();
                
                switch (reportDef.DataSourceType.ToLower())
                {
                    case "storedprocedure":
                        result.Data = await ExecuteStoredProcedureAsync(connection, reportDef.DataSourceValue, parameters);
                        break;
                        
                    case "sql":
                        result.Data = await ExecuteSqlQueryAsync(connection, reportDef.DataSourceValue, parameters);
                        break;
                        
                    default:
                        result.Error = "Unsupported data source type";
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating report for ReportId: {ReportId}", reportId);
                result.Error = $"An error occurred while generating the report: {ex.Message}";
            }
            
            return result;
        }

        private string ValidateParameters(List<ReportParameter> reportParams, Dictionary<string, object> providedParams)
        {
            if (reportParams == null || !reportParams.Any())
                return null;

            var requiredParams = reportParams.Where(p => p.IsRequired).ToList();
            
            foreach (var requiredParam in requiredParams)
            {
                if (!providedParams.ContainsKey(requiredParam.ParameterName) || 
                    providedParams[requiredParam.ParameterName] == null ||
                    string.IsNullOrWhiteSpace(providedParams[requiredParam.ParameterName].ToString()))
                {
                    return $"Required parameter '{requiredParam.DisplayName}' is missing or empty";
                }
            }

            return null;
        }

        private async Task<DataTable> ExecuteStoredProcedureAsync(IDbConnection connection, string procName, Dictionary<string, object> parameters)
        {
            var dataTable = new DataTable();
            
            try
            {
                if (connection.State != ConnectionState.Open)
                    connection.Open();

                using var command = connection.CreateCommand();
                command.CommandText = procName;
                command.CommandType = CommandType.StoredProcedure;
                command.CommandTimeout = 300; // 5 minutes timeout
                
                foreach (var param in parameters)
                {
                    var dbParam = command.CreateParameter();
                    dbParam.ParameterName = $"@{param.Key}";
                    dbParam.Value = ConvertParameterValue(param.Value);
                    command.Parameters.Add(dbParam);
                }

                using var reader = command.ExecuteReader();
                dataTable.Load(reader);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing stored procedure: {ProcName}", procName);
                throw;
            }
            
            return dataTable;
        }

        private async Task<DataTable> ExecuteSqlQueryAsync(IDbConnection connection, string sql, Dictionary<string, object> parameters)
        {
            var dataTable = new DataTable();
            
            try
            {
                if (connection.State != ConnectionState.Open)
                    connection.Open();

                using var command = connection.CreateCommand();
                command.CommandText = sql;
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 300; // 5 minutes timeout
                
                foreach (var param in parameters)
                {
                    var dbParam = command.CreateParameter();
                    dbParam.ParameterName = $"@{param.Key}";
                    dbParam.Value = ConvertParameterValue(param.Value);
                    command.Parameters.Add(dbParam);
                }
                
                using var reader = command.ExecuteReader();
                dataTable.Load(reader);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing SQL query: {Sql}", sql);
                throw;
            }
            
            return dataTable;
        }

        private object ConvertParameterValue(object value)
        {
            if (value == null)
                return DBNull.Value;

            var stringValue = value.ToString();
            
            if (string.IsNullOrWhiteSpace(stringValue))
                return DBNull.Value;

            // Try to parse dates
            if (DateTime.TryParse(stringValue, out DateTime dateValue))
            {
                return dateValue;
            }

            // Try to parse numbers
            if (int.TryParse(stringValue, out int intValue))
            {
                return intValue;
            }

            if (decimal.TryParse(stringValue, out decimal decimalValue))
            {
                return decimalValue;
            }

            // Return as string
            return stringValue;
        }
        
        public async Task<int> CreateReportAsync(ReportDefinition report)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                using var transaction = connection.BeginTransaction();
                
                try
                {
                    var sql = @"
                        INSERT INTO SnehaReportDefinitions 
                        (ReportName, Description, Category, DataSourceType, DataSourceValue, 
                         Parameters, LayoutSettings, AccessRoles, IsActive, CreatedDate, ModifiedDate)
                        OUTPUT INSERTED.ReportId
                        VALUES 
                        (@ReportName, @Description, @Category, @DataSourceType, @DataSourceValue, 
                         @Parameters, @LayoutSettings, @AccessRoles, @IsActive, GETDATE(), GETDATE())";
                    
                    var reportId = await connection.QuerySingleAsync<int>(sql, report, transaction);
                    
                    // Auto-extract parameters from SQL/StoredProcedure
                    List<string> detectedParams = new List<string>();
                    
                    if (report.DataSourceType?.ToLower() == "sql")
                    {
                        detectedParams = ExtractParametersFromSql(report.DataSourceValue);
                    }
                    else if (report.DataSourceType?.ToLower() == "storedprocedure")
                    {
                        // For stored procedures, we could potentially query sys.parameters
                        // For now, we'll also use regex to extract from any example calls
                        detectedParams = ExtractParametersFromSql(report.DataSourceValue);
                    }
                    
                    // Create ReportParameter entries for detected parameters
                    if (detectedParams.Any())
                    {
                        var parameterSql = @"
                            INSERT INTO SnehaReportParameters 
                            (ReportId, ParameterName, DisplayName, ParameterType, DefaultValue, 
                             IsRequired, ValidationRule, DropdownOptions)
                            VALUES 
                            (@ReportId, @ParameterName, @DisplayName, @ParameterType, @DefaultValue, 
                             @IsRequired, @ValidationRule, @DropdownOptions)";
                        
                        foreach (var paramName in detectedParams)
                        {
                            var reportParam = new ReportParameter
                            {
                                ReportId = reportId,
                                ParameterName = paramName,
                                DisplayName = FormatDisplayName(paramName),
                                ParameterType = GuessParameterType(paramName),
                                DefaultValue = null,
                                IsRequired = true, // Default to required
                                ValidationRule = null,
                                DropdownOptions = null
                            };
                            
                            await connection.ExecuteAsync(parameterSql, reportParam, transaction);
                        }
                    }
                    
                    // Also insert any manually provided parameters
                    if (report.ReportParameters?.Any() == true)
                    {
                        var parameterSql = @"
                            INSERT INTO SnehaReportParameters 
                            (ReportId, ParameterName, DisplayName, ParameterType, DefaultValue, 
                             IsRequired, ValidationRule, DropdownOptions)
                            VALUES 
                            (@ReportId, @ParameterName, @DisplayName, @ParameterType, @DefaultValue, 
                             @IsRequired, @ValidationRule, @DropdownOptions)";
                        
                        foreach (var param in report.ReportParameters)
                        {
                            // Skip if we already added this parameter from auto-detection
                            if (detectedParams.Contains(param.ParameterName))
                                continue;
                                
                            param.ReportId = reportId;
                            await connection.ExecuteAsync(parameterSql, param, transaction);
                        }
                    }
                    
                    transaction.Commit();
                    _logger.LogInformation("Successfully created report {ReportId} with {ParamCount} auto-detected parameters", 
                                         reportId, detectedParams.Count);
                    return reportId;
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating report: {ReportName}", report.ReportName);
                throw;
            }
        }
        
        private string FormatDisplayName(string parameterName)
        {
            // Convert camelCase/PascalCase to readable format
            // e.g., "PlanAlertID" becomes "Plan Alert ID"
            var result = Regex.Replace(parameterName, @"([A-Z])", " $1").Trim();
            
            // Capitalize first letter
            if (!string.IsNullOrEmpty(result))
            {
                result = char.ToUpper(result[0]) + result.Substring(1);
            }
            
            return result;
        }
        
        private string GuessParameterType(string parameterName)
        {
            var lowerName = parameterName.ToLower();
            
            // Common patterns for different types
            if (lowerName.Contains("date") || lowerName.Contains("time"))
                return "Date";
            
            if (lowerName.Contains("id") || lowerName.Contains("count") || lowerName.Contains("number"))
                return "Number";
            
            if (lowerName.Contains("status") || lowerName.Contains("type") || lowerName.Contains("category"))
                return "Dropdown";
            
            // Default to text
            return "Text";
        }
        
        public async Task<bool> UpdateReportAsync(ReportDefinition report)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                var sql = @"
                    UPDATE SnehaReportDefinitions 
                    SET ReportName = @ReportName, Description = @Description, Category = @Category,
                        DataSourceType = @DataSourceType, DataSourceValue = @DataSourceValue,
                        Parameters = @Parameters, LayoutSettings = @LayoutSettings, 
                        AccessRoles = @AccessRoles, IsActive = @IsActive, ModifiedDate = GETDATE()
                    WHERE ReportId = @ReportId";
                
                var rowsAffected = await connection.ExecuteAsync(sql, report);
                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating report: {ReportId}", report.ReportId);
                throw;
            }
        }
        
        public async Task<bool> DeleteReportAsync(int reportId)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                // Soft delete
                var sql = @"
                    UPDATE SnehaReportDefinitions 
                    SET IsActive = 0, ModifiedDate = GETDATE()
                    WHERE ReportId = @ReportId";
                
                var rowsAffected = await connection.ExecuteAsync(sql, new { ReportId = reportId });
                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting report: {ReportId}", reportId);
                throw;
            }
        }
    }
}

