
Custom report functionality tool using C# ideas based on i just make a entry in the database for the source of data and report should be visible on the ui 

GitHub Copilot: Based on your request for a custom report functionality tool in C#, I'll outline a solution that allows you to create reports by simply adding database entries that will then be visible on the UI.

# Custom Report Generation Framework

Here's a comprehensive approach to building a flexible report generation system where adding a database entry makes the report available in the UI:

## 1. Database Structure

```sql
-- Reports definition table
CREATE TABLE ReportDefinitions (
    ReportId INT PRIMARY KEY IDENTITY(1,1),
    ReportName NVARCHAR(100) NOT NULL,
    Description NVARCHAR(500),
    Category NVARCHAR(50),
    DataSourceType NVARCHAR(50) NOT NULL, -- 'StoredProcedure', 'SQL', 'API', etc.
    DataSourceValue NVARCHAR(MAX) NOT NULL, -- SP name, SQL query, API endpoint
    Parameters NVARCHAR(MAX), -- JSON array of parameter definitions
    LayoutSettings NVARCHAR(MAX), -- JSON containing column definitions, formatting rules
    AccessRoles NVARCHAR(MAX), -- JSON array of role IDs that can access this report
    IsActive BIT DEFAULT 1,
    CreatedDate DATETIME DEFAULT GETDATE(),
    ModifiedDate DATETIME DEFAULT GETDATE()
)

-- Report parameters table (for predefined parameter values)
CREATE TABLE ReportParameters (
    ParameterId INT PRIMARY KEY IDENTITY(1,1),
    ReportId INT FOREIGN KEY REFERENCES ReportDefinitions(ReportId),
    ParameterName NVARCHAR(50) NOT NULL,
    DisplayName NVARCHAR(100) NOT NULL,
    ParameterType NVARCHAR(50) NOT NULL, -- 'Text', 'Number', 'Date', 'Dropdown', etc.
    DefaultValue NVARCHAR(MAX),
    IsRequired BIT DEFAULT 0,
    ValidationRule NVARCHAR(500), -- Regex or validation expression
    DropdownOptions NVARCHAR(MAX) -- JSON array for dropdown options
)
```

## 2. Backend Components

### Report Service

```csharp
public class ReportDefinition
{
    public int ReportId { get; set; }
    public string ReportName { get; set; }
    public string Description { get; set; }
    public string Category { get; set; }
    public string DataSourceType { get; set; }
    public string DataSourceValue { get; set; }
    public List<ReportParameter> Parameters { get; set; }
    public JObject LayoutSettings { get; set; }
    public List<string> AccessRoles { get; set; }
    public bool IsActive { get; set; }
    public DateTime CreatedDate { get; set; }
    public DateTime ModifiedDate { get; set; }
}

public class ReportParameter
{
    public int ParameterId { get; set; }
    public string ParameterName { get; set; }
    public string DisplayName { get; set; }
    public string ParameterType { get; set; }
    public string DefaultValue { get; set; }
    public bool IsRequired { get; set; }
    public string ValidationRule { get; set; }
    public List<DropdownOption> DropdownOptions { get; set; }
}

public class DropdownOption
{
    public string Value { get; set; }
    public string Display { get; set; }
}

public class ReportData
{
    public ReportDefinition Metadata { get; set; }
    public DataTable Data { get; set; }
    public string Error { get; set; }
}
```

### Report Service Implementation

```csharp
public interface IReportService
{
    List<ReportDefinition> GetAvailableReports(string userId, IEnumerable<string> userRoles);
    ReportDefinition GetReportDefinition(int reportId);
    ReportData GenerateReport(int reportId, Dictionary<string, string> parameters);
}

public class ReportService : IReportService
{
    private readonly IDbConnection _dbConnection;
    private readonly ILogger<ReportService> _logger;

    public ReportService(IDbConnection dbConnection, ILogger<ReportService> logger)
    {
        _dbConnection = dbConnection;
        _logger = logger;
    }

    public List<ReportDefinition> GetAvailableReports(string userId, IEnumerable<string> userRoles)
    {
        try
        {
            var reports = _dbConnection.Query<ReportDefinition>(
                "SELECT * FROM ReportDefinitions WHERE IsActive = 1").ToList();
            
            // Filter reports by user roles
            return reports.Where(r => {
                var accessRoles = JsonConvert.DeserializeObject<List<string>>(r.AccessRoles);
                return !accessRoles.Any() || accessRoles.Any(role => userRoles.Contains(role));
            }).ToList();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving available reports");
            throw;
        }
    }

    public ReportDefinition GetReportDefinition(int reportId)
    {
        try
        {
            var report = _dbConnection.QueryFirstOrDefault<ReportDefinition>(
                "SELECT * FROM ReportDefinitions WHERE ReportId = @ReportId", 
                new { ReportId = reportId });

            if (report == null)
                return null;

            // Load parameters
            var parameters = _dbConnection.Query<ReportParameter>(
                "SELECT * FROM ReportParameters WHERE ReportId = @ReportId",
                new { ReportId = reportId }).ToList();

            report.Parameters = parameters;
            
            // Deserialize JSON fields
            report.LayoutSettings = JObject.Parse(report.LayoutSettings ?? "{}");
            report.AccessRoles = JsonConvert.DeserializeObject<List<string>>(report.AccessRoles ?? "[]");

            return report;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving report definition");
            throw;
        }
    }

    public ReportData GenerateReport(int reportId, Dictionary<string, string> parameters)
    {
        var result = new ReportData();
        
        try
        {
            var reportDef = GetReportDefinition(reportId);
            if (reportDef == null)
            {
                result.Error = "Report not found";
                return result;
            }

            result.Metadata = reportDef;

            // Execute the appropriate data source based on type
            switch (reportDef.DataSourceType.ToLower())
            {
                case "storedprocedure":
                    result.Data = ExecuteStoredProcedure(reportDef.DataSourceValue, parameters);
                    break;
                    
                case "sql":
                    result.Data = ExecuteSqlQuery(reportDef.DataSourceValue, parameters);
                    break;
                    
                case "api":
                    result.Data = FetchDataFromApi(reportDef.DataSourceValue, parameters);
                    break;
                    
                default:
                    result.Error = "Unsupported data source type";
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating report");
            result.Error = "An error occurred while generating the report";
        }
        
        return result;
    }

    private DataTable ExecuteStoredProcedure(string procName, Dictionary<string, string> parameters)
    {
        var dt = new DataTable();
        
        using (var cmd = _dbConnection.CreateCommand())
        {
            cmd.CommandText = procName;
            cmd.CommandType = CommandType.StoredProcedure;
            
            // Add parameters
            foreach (var param in parameters)
            {
                var dbParam = cmd.CreateParameter();
                dbParam.ParameterName = param.Key;
                dbParam.Value = param.Value;
                cmd.Parameters.Add(dbParam);
            }
            
            using (var adapter = new SqlDataAdapter((SqlCommand)cmd))
            {
                adapter.Fill(dt);
            }
        }
        
        return dt;
    }
    
    private DataTable ExecuteSqlQuery(string sql, Dictionary<string, string> parameters)
    {
        // Implementation for direct SQL queries with parameter substitution
        var dt = new DataTable();
        
        // Security note: ensure proper parameterization to prevent SQL injection
        using (var cmd = _dbConnection.CreateCommand())
        {
            cmd.CommandText = sql;
            cmd.CommandType = CommandType.Text;
            
            // Add parameters
            foreach (var param in parameters)
            {
                var dbParam = cmd.CreateParameter();
                dbParam.ParameterName = param.Key;
                dbParam.Value = param.Value;
                cmd.Parameters.Add(dbParam);
            }
            
            using (var adapter = new SqlDataAdapter((SqlCommand)cmd))
            {
                adapter.Fill(dt);
            }
        }
        
        return dt;
    }
    
    private DataTable FetchDataFromApi(string apiEndpoint, Dictionary<string, string> parameters)
    {
        // Implementation for API data sources
        // This would make HTTP requests and convert JSON responses to DataTable
        // Not fully implemented here for brevity
        throw new NotImplementedException("API data source not implemented yet");
    }
}
```

## 3. API Controllers

```csharp
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class ReportsController : ControllerBase
{
    private readonly IReportService _reportService;
    
    public ReportsController(IReportService reportService)
    {
        _reportService = reportService;
    }
    
    [HttpGet]
    public IActionResult GetAvailableReports()
    {
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var roles = User.FindAll(ClaimTypes.Role).Select(c => c.Value);
        
        var reports = _reportService.GetAvailableReports(userId, roles);
        return Ok(reports);
    }
    
    [HttpGet("{id}")]
    public IActionResult GetReportDefinition(int id)
    {
        var report = _reportService.GetReportDefinition(id);
        if (report == null)
            return NotFound();
            
        return Ok(report);
    }
    
    [HttpPost("{id}/generate")]
    public IActionResult GenerateReport(int id, [FromBody] Dictionary<string, string> parameters)
    {
        var reportData = _reportService.GenerateReport(id, parameters);
        if (!string.IsNullOrEmpty(reportData.Error))
            return BadRequest(reportData.Error);
            
        return Ok(reportData);
    }
    
    [HttpGet("export/{id}")]
    public IActionResult ExportReport(int id, [FromQuery] Dictionary<string, string> parameters, [FromQuery] string format = "excel")
    {
        var reportData = _reportService.GenerateReport(id, parameters);
        if (!string.IsNullOrEmpty(reportData.Error))
            return BadRequest(reportData.Error);
            
        // Generate export based on format
        byte[] fileContent;
        string contentType;
        string fileName;
        
        switch (format.ToLower())
        {
            case "excel":
                fileContent = GenerateExcelReport(reportData);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileName = $"{reportData.Metadata.ReportName}_{DateTime.Now:yyyyMMdd}.xlsx";
                break;
                
            case "pdf":
                fileContent = GeneratePdfReport(reportData);
                contentType = "application/pdf";
                fileName = $"{reportData.Metadata.ReportName}_{DateTime.Now:yyyyMMdd}.pdf";
                break;
                
            case "csv":
                fileContent = GenerateCsvReport(reportData);
                contentType = "text/csv";
                fileName = $"{reportData.Metadata.ReportName}_{DateTime.Now:yyyyMMdd}.csv";
                break;
                
            default:
                return BadRequest("Unsupported export format");
        }
        
        return File(fileContent, contentType, fileName);
    }
    
    private byte[] GenerateExcelReport(ReportData reportData)
    {
        // Implementation for Excel export
        // Not fully implemented for brevity
        throw new NotImplementedException();
    }
    
    private byte[] GeneratePdfReport(ReportData reportData)
    {
        // Implementation for PDF export
        throw new NotImplementedException();
    }
    
    private byte[] GenerateCsvReport(ReportData reportData)
    {
        // Implementation for CSV export
        throw new NotImplementedException();
    }
}
```

## 4. Frontend Implementation

### Report List Component

```typescript
@Component({
  selector: 'app-report-list',
  templateUrl: './report-list.component.html'
})
export class ReportListComponent implements OnInit {
  reports: ReportDefinition[] = [];
  categories: string[] = [];
  filteredReports: ReportDefinition[] = [];
  selectedCategory: string = 'All';
  
  constructor(private reportService: ReportService) {}
  
  ngOnInit() {
    this.loadReports();
  }
  
  loadReports() {
    this.reportService.getAvailableReports().subscribe(reports => {
      this.reports = reports;
      this.filteredReports = reports;
      this.extractCategories();
    });
  }
  
  extractCategories() {
    this.categories = ['All', ...new Set(this.reports.map(r => r.category))];
  }
  
  filterByCategory(category: string) {
    this.selectedCategory = category;
    if (category === 'All') {
      this.filteredReports = this.reports;
    } else {
      this.filteredReports = this.reports.filter(r => r.category === category);
    }
  }
  
  runReport(report: ReportDefinition) {
    // Navigate to report viewer with report ID
    this.router.navigate(['/reports/view', report.reportId]);
  }
}
```

### Report Viewer Component

```typescript
@Component({
  selector: 'app-report-viewer',
  templateUrl: './report-viewer.component.html'
})
export class ReportViewerComponent implements OnInit {
  reportId: number;
  reportDefinition: ReportDefinition;
  reportData: any;
  parameters: any = {};
  isLoading: boolean = false;
  
  constructor(
    private route: ActivatedRoute,
    private reportService: ReportService
  ) {}
  
  ngOnInit() {
    this.route.params.subscribe(params => {
      this.reportId = +params['id'];
      this.loadReportDefinition();
    });
  }
  
  loadReportDefinition() {
    this.reportService.getReportDefinition(this.reportId)
      .subscribe(definition => {
        this.reportDefinition = definition;
        
        // Initialize parameters with default values
        if (this.reportDefinition.parameters) {
          this.reportDefinition.parameters.forEach(p => {
            this.parameters[p.parameterName] = p.defaultValue;
          });
        }
      });
  }
  
  generateReport() {
    this.isLoading = true;
    this.reportService.generateReport(this.reportId, this.parameters)
      .subscribe(
        data => {
          this.reportData = data;
          this.isLoading = false;
        },
        error => {
          console.error('Error generating report', error);
          this.isLoading = false;
        }
      );
  }
  
  exportReport(format: string) {
    this.reportService.exportReport(this.reportId, this.parameters, format);
  }
}
```

## 5. UI Components (HTML Templates)

### Report List Page

```html
<div class="reports-container">
  <h2>Reports Dashboard</h2>
  
  <div class="category-filter">
    <label>Filter by Category:</label>
    <div class="btn-group">
      <button *ngFor="let category of categories" 
              [class.active]="category === selectedCategory"
              (click)="filterByCategory(category)"
              class="btn btn-outline-primary">
        {{category}}
      </button>
    </div>
  </div>
  
  <div class="report-cards">
    <div class="row">
      <div *ngFor="let report of filteredReports" class="col-md-4 mb-4">
        <div class="card h-100">
          <div class="card-body">
            <h5 class="card-title">{{report.reportName}}</h5>
            <p class="card-text">{{report.description}}</p>
            <span class="badge badge-info">{{report.category}}</span>
          </div>
          <div class="card-footer">
            <button class="btn btn-primary" (click)="runReport(report)">
              Run Report
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
```

### Report Viewer Page

```html
<div class="report-viewer" *ngIf="reportDefinition">
  <div class="report-header">
    <h2>{{reportDefinition.reportName}}</h2>
    <p>{{reportDefinition.description}}</p>
  </div>
  
  <div class="report-parameters" *ngIf="reportDefinition.parameters?.length > 0">
    <h4>Parameters</h4>
    <form (ngSubmit)="generateReport()" #paramForm="ngForm">
      <div class="row">
        <div *ngFor="let param of reportDefinition.parameters" class="col-md-4 mb-3">
          <div [ngSwitch]="param.parameterType">
            <!-- Text input -->
            <div *ngSwitchCase="'Text'" class="form-group">
              <label [for]="param.parameterName">{{param.displayName}}</label>
              <input type="text" 
                     class="form-control" 
                     [id]="param.parameterName" 
                     [name]="param.parameterName"
                     [(ngModel)]="parameters[param.parameterName]"
                     [required]="param.isRequired">
            </div>
            
            <!-- Number input -->
            <div *ngSwitchCase="'Number'" class="form-group">
              <label [for]="param.parameterName">{{param.displayName}}</label>
              <input type="number" 
                     class="form-control" 
                     [id]="param.parameterName" 
                     [name]="param.parameterName"
                     [(ngModel)]="parameters[param.parameterName]"
                     [required]="param.isRequired">
            </div>
            
            <!-- Date input -->
            <div *ngSwitchCase="'Date'" class="form-group">
              <label [for]="param.parameterName">{{param.displayName}}</label>
              <input type="date" 
                     class="form-control" 
                     [id]="param.parameterName" 
                     [name]="param.parameterName"
                     [(ngModel)]="parameters[param.parameterName]"
                     [required]="param.isRequired">
            </div>
            
            <!-- Dropdown input -->
            <div *ngSwitchCase="'Dropdown'" class="form-group">
              <label [for]="param.parameterName">{{param.displayName}}</label>
              <select class="form-control"
                      [id]="param.parameterName" 
                      [name]="param.parameterName"
                      [(ngModel)]="parameters[param.parameterName]"
                      [required]="param.isRequired">
                <option *ngFor="let option of param.dropdownOptions" [value]="option.value">
                  {{option.display}}
                </option>
              </select>
            </div>
          </div>
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn btn-primary" [disabled]="!paramForm.form.valid || isLoading">
          <span *ngIf="isLoading" class="spinner-border spinner-border-sm" role="status"></span>
          Generate Report
        </button>
      </div>
    </form>
  </div>
  
  <div class="report-actions mt-3" *ngIf="reportData">
    <div class="btn-group">
      <button class="btn btn-outline-secondary" (click)="exportReport('excel')">
        <i class="fa fa-file-excel-o"></i> Export to Excel
      </button>
      <button class="btn btn-outline-secondary" (click)="exportReport('pdf')">
        <i class="fa fa-file-pdf-o"></i> Export to PDF
      </button>
      <button class="btn btn-outline-secondary" (click)="exportReport('csv')">
        <i class="fa fa-file-text-o"></i> Export to CSV
      </button>
    </div>
  </div>
  
  <div class="report-data mt-4" *ngIf="reportData">
    <div class="table-responsive">
      <table class="table table-striped table-bordered">
        <thead>
          <tr>
            <th *ngFor="let column of reportData.columns">{{column.displayName}}</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let row of reportData.rows">
            <td *ngFor="let column of reportData.columns">{{row[column.name]}}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
```

## 6. Report Administration UI

Additionally, you could implement an admin UI for managing report definitions, which would allow non-developers to create and modify reports.

```csharp
[ApiController]
[Route("api/admin/reports")]
[Authorize(Roles = "ReportAdmin")]
public class ReportAdminController : ControllerBase
{
    private readonly IReportAdminService _adminService;
    
    public ReportAdminController(IReportAdminService adminService)
    {
        _adminService = adminService;
    }
    
    [HttpGet]
    public IActionResult GetAllReports()
    {
        return Ok(_adminService.GetAllReports());
    }
    
    [HttpGet("{id}")]
    public IActionResult GetReport(int id)
    {
        var report = _adminService.GetReport(id);
        if (report == null)
            return NotFound();
            
        return Ok(report);
    }
    
    [HttpPost]
    public IActionResult CreateReport([FromBody] ReportDefinition report)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);
            
        var id = _adminService.CreateReport(report);
        return CreatedAtAction(nameof(GetReport), new { id }, report);
    }
    
    [HttpPut("{id}")]
    public IActionResult UpdateReport(int id, [FromBody] ReportDefinition report)
    {
        if (id != report.ReportId)
            return BadRequest();
            
        if (!ModelState.IsValid)
            return BadRequest(ModelState);
            
        _adminService.UpdateReport(report);
        return NoContent();
    }
    
    [HttpDelete("{id}")]
    public IActionResult DeleteReport(int id)
    {
        _adminService.DeleteReport(id);
        return NoContent();
    }
    
    [HttpPost("{id}/parameters")]
    public IActionResult AddParameter(int id, [FromBody] ReportParameter parameter)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);
            
        _adminService.AddParameter(id, parameter);
        return Ok();
    }
    
    [HttpDelete("parameters/{paramId}")]
    public IActionResult DeleteParameter(int paramId)
    {
        _adminService.DeleteParameter(paramId);
        return NoContent();
    }
    
    [HttpPost("{id}/test")]
    public IActionResult TestReport(int id, [FromBody] Dictionary<string, string> parameters)
    {
        var result = _adminService.TestReport(id, parameters);
        return Ok(result);
    }
}
```

## 7. Dependency Injection Setup

```csharp
public void ConfigureServices(IServiceCollection services)
{
    // Add database connection
    services.AddScoped<IDbConnection>(sp => {
        var configuration = sp.GetRequiredService<IConfiguration>();
        return new SqlConnection(configuration.GetConnectionString("DefaultConnection"));
    });
    
    // Register services
    services.AddScoped<IReportService, ReportService>();
    services.AddScoped<IReportAdminService, ReportAdminService>();
    
    // Other service registrations...
}
```

## 8. Benefits of This Approach

1. **Dynamic Report Creation** - New reports can be added without code changes
2. **Flexible Data Sources** - Support for stored procedures, SQL queries, and APIs
3. **Role-Based Access** - Reports visibility controlled by user roles
4. **Multiple Export Formats** - Built-in support for Excel, PDF, and CSV exports
5. **Parameter Management** - Flexible parameter system with validation
6. **Separation of Concerns** - Clean architecture with clear responsibilities

## 9. Usage Example

With this system in place, adding a new report would be as simple as:

1. Creating a stored procedure or SQL query to fetch the data
2. Adding a record to the `ReportDefinitions` table with appropriate metadata
3. (Optional) Adding parameter definitions to the `ReportParameters` table

The report would immediately appear in the UI for users with appropriate roles, and they could run and export it without any additional development work.

This approach creates a robust, flexible reporting system where business users can define reports through database entries, and the application dynamically renders and executes them.
