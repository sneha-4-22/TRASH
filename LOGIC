using Custom_report.Models;
using Dapper;
using System.Data;
using System.Data.SqlClient;
using Newtonsoft.Json;

namespace Custom_report.Services
{
    public interface IReportService
    {
        Task<List<ReportDefinition>> GetAvailableReportsAsync(IEnumerable<string> userRoles);
        Task<ReportDefinition> GetReportDefinitionAsync(int reportId);
        Task<ReportData> GenerateReportAsync(int reportId, Dictionary<string, object> parameters);
        Task<int> CreateReportAsync(ReportDefinition report);
        Task<bool> UpdateReportAsync(ReportDefinition report);
        Task<bool> DeleteReportAsync(int reportId);
    }
    
    public sealed class ReportService : IReportService
    {
        private static ReportService? _instance;
        private static readonly object _lockObject = new object();
        private readonly IDatabaseService _databaseService;
        private readonly ILogger<ReportService> _logger;
        
        private ReportService(IDatabaseService databaseService, ILogger<ReportService> logger)
        {
            _databaseService = databaseService;
            _logger = logger;
        }
        
        public static ReportService GetInstance(IDatabaseService databaseService, ILogger<ReportService> logger)
        {
            if (_instance == null)
            {
                lock (_lockObject)
                {
                    if (_instance == null)
                    {
                        _instance = new ReportService(databaseService, logger);
                    }
                }
            }
            return _instance;
        }
        
        public async Task<List<ReportDefinition>> GetAvailableReportsAsync(IEnumerable<string> userRoles)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                var sql = @"
                    SELECT ReportId, ReportName, Description, Category, DataSourceType, 
                           DataSourceValue, Parameters, LayoutSettings, AccessRoles, 
                           IsActive, CreatedDate, ModifiedDate 
                    FROM SnehaReportDefinitions 
                    WHERE IsActive = 1";
                
                var reports = (await connection.QueryAsync<ReportDefinition>(sql)).ToList();
                
                // Filter by user roles
                var filteredReports = reports.Where(r =>
                {
                    if (string.IsNullOrEmpty(r.AccessRoles)) return true;
                    
                    try
                    {
                        var accessRoles = JsonConvert.DeserializeObject<List<string>>(r.AccessRoles);
                        return !accessRoles.Any() || accessRoles.Any(role => userRoles.Contains(role));
                    }
                    catch
                    {
                        return true; // If JSON parsing fails, allow access
                    }
                }).ToList();
                
                return filteredReports;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving available reports");
                throw;
            }
        }
        
        public async Task<ReportDefinition> GetReportDefinitionAsync(int reportId)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                var reportSql = @"
                    SELECT ReportId, ReportName, Description, Category, DataSourceType, 
                           DataSourceValue, Parameters, LayoutSettings, AccessRoles, 
                           IsActive, CreatedDate, ModifiedDate 
                    FROM SnehaReportDefinitions 
                    WHERE ReportId = @ReportId";
                
                var report = await connection.QueryFirstOrDefaultAsync<ReportDefinition>(reportSql, new { ReportId = reportId });
                
                if (report == null) return null;
                
                // Load parameters
                var parametersSql = @"
                    SELECT ParameterId, ReportId, ParameterName, DisplayName, ParameterType, 
                           DefaultValue, IsRequired, ValidationRule, DropdownOptions 
                    FROM SnehaReportParameters 
                    WHERE ReportId = @ReportId";
                
                var parameters = (await connection.QueryAsync<ReportParameter>(parametersSql, new { ReportId = reportId })).ToList();
                report.ReportParameters = parameters;
                
                return report;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving report definition for ReportId: {ReportId}", reportId);
                throw;
            }
        }

        public async Task<ReportData> GenerateReportAsync(int reportId, Dictionary<string, object> parameters)
        {
            var result = new ReportData();
            
            try
            {
                var reportDef = await GetReportDefinitionAsync(reportId);
                if (reportDef == null)
                {
                    result.Error = "Report not found";
                    return result;
                }
                
                result.Metadata = reportDef;
                
                // Validate required parameters
                var validationError = ValidateParameters(reportDef.ReportParameters, parameters);
                if (!string.IsNullOrEmpty(validationError))
                {
                    result.Error = validationError;
                    return result;
                }
                
                using var connection = _databaseService.GetConnection();
                
                switch (reportDef.DataSourceType.ToLower())
                {
                    case "storedprocedure":
                        result.Data = await ExecuteStoredProcedureAsync(connection, reportDef.DataSourceValue, parameters);
                        break;
                        
                    case "sql":
                        result.Data = await ExecuteSqlQueryAsync(connection, reportDef.DataSourceValue, parameters);
                        break;
                        
                    default:
                        result.Error = "Unsupported data source type";
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating report for ReportId: {ReportId}", reportId);
                result.Error = $"An error occurred while generating the report: {ex.Message}";
            }
            
            return result;
        }

        private string ValidateParameters(List<ReportParameter> reportParams, Dictionary<string, object> providedParams)
        {
            if (reportParams == null || !reportParams.Any())
                return null;

            var requiredParams = reportParams.Where(p => p.IsRequired).ToList();
            
            foreach (var requiredParam in requiredParams)
            {
                if (!providedParams.ContainsKey(requiredParam.ParameterName) || 
                    providedParams[requiredParam.ParameterName] == null ||
                    string.IsNullOrWhiteSpace(providedParams[requiredParam.ParameterName].ToString()))
                {
                    return $"Required parameter '{requiredParam.DisplayName}' is missing or empty";
                }
            }

            return null;
        }

        private async Task<DataTable> ExecuteStoredProcedureAsync(IDbConnection connection, string procName, Dictionary<string, object> parameters)
        {
            var dataTable = new DataTable();
            
            try
            {
                if (connection.State != ConnectionState.Open)
                    connection.Open();

                using var command = connection.CreateCommand();
                command.CommandText = procName;
                command.CommandType = CommandType.StoredProcedure;
                command.CommandTimeout = 300; // 5 minutes timeout
                
                foreach (var param in parameters)
                {
                    var dbParam = command.CreateParameter();
                    dbParam.ParameterName = $"@{param.Key}";
                    dbParam.Value = ConvertParameterValue(param.Value);
                    command.Parameters.Add(dbParam);
                }

                using var reader = command.ExecuteReader();
                dataTable.Load(reader);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing stored procedure: {ProcName}", procName);
                throw;
            }
            
            return dataTable;
        }

        private async Task<DataTable> ExecuteSqlQueryAsync(IDbConnection connection, string sql, Dictionary<string, object> parameters)
        {
            var dataTable = new DataTable();
            
            try
            {
                if (connection.State != ConnectionState.Open)
                    connection.Open();

                using var command = connection.CreateCommand();
                command.CommandText = sql;
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 300; // 5 minutes timeout
                
                foreach (var param in parameters)
                {
                    var dbParam = command.CreateParameter();
                    dbParam.ParameterName = $"@{param.Key}";
                    dbParam.Value = ConvertParameterValue(param.Value);
                    command.Parameters.Add(dbParam);
                }
                
                using var reader = command.ExecuteReader();
                dataTable.Load(reader);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing SQL query: {Sql}", sql);
                throw;
            }
            
            return dataTable;
        }

        private object ConvertParameterValue(object value)
        {
            if (value == null)
                return DBNull.Value;

            var stringValue = value.ToString();
            
            if (string.IsNullOrWhiteSpace(stringValue))
                return DBNull.Value;

            // Try to parse dates
            if (DateTime.TryParse(stringValue, out DateTime dateValue))
            {
                return dateValue;
            }

            // Try to parse numbers
            if (int.TryParse(stringValue, out int intValue))
            {
                return intValue;
            }

            if (decimal.TryParse(stringValue, out decimal decimalValue))
            {
                return decimalValue;
            }

            // Return as string
            return stringValue;
        }
        
        public async Task<int> CreateReportAsync(ReportDefinition report)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                var sql = @"
                    INSERT INTO SnehaReportDefinitions 
                    (ReportName, Description, Category, DataSourceType, DataSourceValue, 
                     Parameters, LayoutSettings, AccessRoles, IsActive, CreatedDate, ModifiedDate)
                    OUTPUT INSERTED.ReportId
                    VALUES 
                    (@ReportName, @Description, @Category, @DataSourceType, @DataSourceValue, 
                     @Parameters, @LayoutSettings, @AccessRoles, @IsActive, GETDATE(), GETDATE())";
                
                var reportId = await connection.QuerySingleAsync<int>(sql, report);
                
                // Insert parameters if any
                if (report.ReportParameters?.Any() == true)
                {
                    var parameterSql = @"
                        INSERT INTO SnehaReportParameters 
                        (ReportId, ParameterName, DisplayName, ParameterType, DefaultValue, 
                         IsRequired, ValidationRule, DropdownOptions)
                        VALUES 
                        (@ReportId, @ParameterName, @DisplayName, @ParameterType, @DefaultValue, 
                         @IsRequired, @ValidationRule, @DropdownOptions)";
                    
                    foreach (var param in report.ReportParameters)
                    {
                        param.ReportId = reportId;
                        await connection.ExecuteAsync(parameterSql, param);
                    }
                }
                
                return reportId;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating report: {ReportName}", report.ReportName);
                throw;
            }
        }
        
        public async Task<bool> UpdateReportAsync(ReportDefinition report)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                var sql = @"
                    UPDATE SnehaReportDefinitions 
                    SET ReportName = @ReportName, Description = @Description, Category = @Category,
                        DataSourceType = @DataSourceType, DataSourceValue = @DataSourceValue,
                        Parameters = @Parameters, LayoutSettings = @LayoutSettings, 
                        AccessRoles = @AccessRoles, IsActive = @IsActive, ModifiedDate = GETDATE()
                    WHERE ReportId = @ReportId";
                
                var rowsAffected = await connection.ExecuteAsync(sql, report);
                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating report: {ReportId}", report.ReportId);
                throw;
            }
        }
        
        public async Task<bool> DeleteReportAsync(int reportId)
        {
            try
            {
                using var connection = _databaseService.GetConnection();
                
                // Soft delete
                var sql = @"
                    UPDATE SnehaReportDefinitions 
                    SET IsActive = 0, ModifiedDate = GETDATE()
                    WHERE ReportId = @ReportId";
                
                var rowsAffected = await connection.ExecuteAsync(sql, new { ReportId = reportId });
                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting report: {ReportId}", reportId);
                throw;
            }
        }
    }
}


